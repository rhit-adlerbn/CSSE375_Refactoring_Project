@startuml
Package Display{

+class UserInterface{
-sys: LintSystem
+UserInterface()

-displayStart(): void
-displayFileRequest(): void
+handleFileEntry(String: path): void
{method} //calls parseAsm to have the adapter process and return the model to lintSystem
-displayFileSelect(): void
{method} //displays all files that checks can be run on, can select one or all files
+handleSelctedFile(string: File): void
-displayCheckSelect(): void
{method} //displays all checks, can select one or all
+handleSelectedCheck(string: Check): List<String>
-displayCheckResults(results: List<String>): void
}

}

Package Domain{

+class ASMAdapter{
    +ASMAdapter()
    +parseClases(folderPath: String): List<ClassModel>
}


UserInterface --> LintSystem
Package Check{
+abstract LintCheck{
+{abstract}runLintCheck(classes: List<ClassModel>): List<String>
}
+class NamingConvCheck{
-PASCAL_REGEX: String
-CAMEL_REGEX: String

+class NamingConvCheck()
+runLintCheck(classes: List<ClassModel>): List<String>
-runNameCheck(pattern: String, name: String): String
-regexCheck(pattern: String, name: String): boolean
}
+class ProgramToInterfaceCheck{
+runLintCheck(classes: List<ClassModel>): List<String>
-getConcretes(classes: List<ClassModel>): List<ClassModel>
-containsAny(mainList: ArrayList<String>, subList: ArrayList<String>): boolean
}
+class SingletonCheck{
+runLintCheck(classes: List<ClassModel>): List<String>
-runStaticCheck(classMod: ClassModel): String
-typeMatches(field: FieldModel, className: String): boolean
}
ProgramToInterfaceCheck ..|> LintCheck
NamingConvCheck ..|> LintCheck
SingletonCheck ..|> LintCheck
}


Package Model{
+class AbstractInsnModel{
    -node: AbstractInsnNode
    +AbstractInsnModel(asmNode: AbstractInsnModel)
    +getType(): int
    +getVar(): VarInsModel
    +getFieldInsnModel(): FieldInsnModel
    +getMethodInsnModel(): MethodInsnModel
    +isFieldInsn(): boolean
    +isMethodInsn(): boolean
}


+class ClassModel{
    -node: ClassNode
    -methods: List<MethodModel>
    -fields: List<FieldModel>
    -interfaces: List<String>
    +ClassModel(node: ClassNode)

    +getName(): String
    +getInterfaces(): List<String>
    +getSuperName(): String
    +isPublic(): boolean
    +isPrivate(): boolean
    +isProtected(): boolean
    +isStatic(): boolean
    +isFinal(): boolean
    +isAbstract(): boolean
    +getMethods(): List<MethodModel>
    +getFields(): List<FieldModel>
    -isAccessModifier(opCode: int): boolean
}

+class FieldInsnModel{
    -node: AbstractInsnNode
    +FieldInsnModel(node: AbstractInsnNode)
    +matchesField(f: FieldModel, owner: ClassModel): boolean
}
+class FieldModel{
    -node: FieldNode
    +FieldModel(node: FieldNode)

    +getName(): String
    +getDesc(): String
    +getType(): String
    +isPublic(): boolean
    +isPrivate(): boolean
    +isProtected(): boolean
    +isStatic(): boolean
    +isFinal(): boolean
    +privatize(): void
    +getSignature(): String
    -isPrimitive(): boolean
    -isAccessModifier(opCode: int): boolean
}
+class InstuctionModel{
    +InstuctionModel(asmNode: InsnList)
    +getSize(): int
    +get(index: int): AbstractInsnModel
}

+class LocalVarModel{
    -node: LocalVariableNode
    +LocalVarModel(node: LocalVariableNode)

    +getName(): String
    +getDesc(): String
    +getIndex(): int
}

+class MethodInsnModel{
    -node: MethodInsnNode
    +MethodInsnModel(node: AbstractInsnNode)
    +matchesMethod(m: MethodModel, owner: ClassModel): boolean
    +isInterfaceMethod(): boolean
}
+class MethodModel{
    -node: MethodNode
    -localVars: List<LocalVarModel>
    -params: List<String>
    -instructions: InsnList

    +MethodModel(node: MethodNode)

    +getName(): String
    +getDesc(): String
    +getReturnType(): String
    +getInstructions(): InstuctionModel
    +isPublic(): boolean
    +isPrivate(): boolean
    +isProtected(): boolean
    +isStatic(): boolean
    +isFinal(): boolean
    -isAccessModifier(opCode: int): boolean
    +getLocalVars():List<LocalVarModel>
    +getParams(): List<String>
    +getInstructions(): String
}
+class VarInsModel{
    -node: VarInsnNode
    +VarInsModel(asmNode: AbstractInsnNode)
    +getType(): int
    +getVar(): int
    +getOpCode(): int
}


}


CheckNamingConv -u-|> LintCheck
LintSystem -->"*" LintCheck
}


Package Data{
    +class PackageLoader{
    +LoadPackage(packagePath: String): List<byte[]>
    }
}
Package Java{
    +class Pattern{
    }
    Package ASM{
        +class Opcodes{
        }
        +class AbstractInsnNode{
        }
        +class ClassNode{
        }
        +class FieldInsnNode{
        }
        +class FieldNode{
        }
        +class InsnList{
        }
        +class MethodInsnNode{
        }
        +class MethodNode{
        }
        +class VarInsnNode{
        }
        +class LocalVariableNode{
        }

    }


}
ASMAdapter ..> ClassModel
LintSystem --> ASMAdapter
LintSystem ..>"*" ClassModel

AbstractInsnModel ..> FieldInsnModel
AbstractInsnModel ..> MethodInsnModel
AbstractInsnModel -->"1" AbstractInsnNode

ClassModel -->"1" ClassNode
ClassModel -->"*" MethodModel
ClassModel -->"*" FieldModel
ClassModel ..> Opcodes

FieldInsnModel -->"1" AbstractInsnNode
FieldInsnModel ..> FieldModel
FieldInsnModel ..> ClassModel
FieldInsnModel ..> FieldInsnNode

FieldModel -->"1" FieldNode
FieldModel ..> Opcodes

InstuctionModel -->"1" InsnList
InstuctionModel ..> AbstractInsnModel

LocalVarModel -->"1" LocalVariableNode

MethodInsnModel -->"1" MethodInsnNode
MethodInsnModel ..> AbstractInsnNode
MethodInsnModel ..> ClassModel
MethodInsnModel ..> MethodModel

MethodModel -->"1" MethodNode
MethodModel -->"1" InsnList
MethodModel -->"*" LocalVarModel
MethodModel ..> InstuctionModel
MethodModel ..> Opcodes

VarInsModel -->"1" VarInsnNode
VarInsModel ..> AbstractInsnNode


ProgramToInterfaceCheck ..> FieldModel
ProgramToInterfaceCheck ..> MethodModel
ProgramToInterfaceCheck ..> ClassModel

NamingConvCheck ..> FieldModel
NamingConvCheck ..> MethodModel
NamingConvCheck ..> ClassModel

SingletonCheck ..> FieldModel
SingletonCheck ..> MethodModel
SingletonCheck ..> ClassModel

@enduml