@startuml
Package Presentation{

+class CommandLineUserInterface{
    -{Static} scanner: Scanner>
}
+class GraphicsUserInterface{
    - {static} <u> FRAME_WIDTH: int
    - {static} <u> FRAME_HEIGHT: int
    - {static} <u> latch: CountDownLatch
    - {static} mainPage: JFrame
    - {static} filePath: JTextField
    - {static} checkNums: JTextField
    - {static} resultText: JTextField
    - {static} scrollPane: JScrollPane
    - {static} createResultsPanel(): JPanel
    - {static} createInputPanel(): JPanel
    - {static} createInfoPanel(): JPanel
    - {static} createButtonPanel(): JPanel
    - {static} createRunButton(): JButton
    - {static} createMainPage(): JFrame
}

+class Main{
+{static} Main(args: String[]): void
}
+abstract class UserInterface{
    -<u> CHECKS: Map
    +runLinter(): void
    ~{abstract} getCheckToRun(): String
    ~{abstract} displayChecks(): void
    ~{abstract} startDisplay(): void
    ~{abstract} getFilePath(): String
    ~{abstract} displayResults(results: List<String>): void
    ~{abstract} close(): void
    -runChecks(checkCommands: List<Integer>, classes: List<ClassModel>): List<String>
    -getClassesFromFile(filePath: String): List<ClassModel>
    -convertInput(s: String): List<Integer>
    #getChecks(): List<String>
}
Main -->UserInterface
GraphicsUserInterface -u-|> UserInterface
CommandLineUserInterface -u-|> UserInterface


}


Package Domain{

    +class Result{
        -className : String
        -testName : String
        -testResult: String

        +Result(className: String, test: String, result: String)
        +getResults(): String[]
        +toString(): String
    }

}


Package Checks{
+Interface LintCheck{
+{abstract}runLintCheck(class: ClassModel): List<String>
}
+class NamingConvCheck{
-class: ClassModel
+NamingConvCheck(class: ClassModel)
+runLintCheck(): List<String>
}

+abstract ChatGPTCheck{
-class: ClassModel
-chatGPT(prompts: List<String> prompt): String
-chatGPTPrompt(prompt: String): String
-chatGPTConnection(body: String): HttpURLConnection
-extractMessageFromJSONResponse(response: String): String
+abstract buildQuery(classes: List<ClassModel>): List<String>
+runLintCheck(): List<Result>
}

+class ChatGPTCouplingCheck {
+buildQuery(classes: List<ClassModel>): List<String>
}

+class ChatGPTSingletonCheck {
+buildQuery(classes: List<ClassModel>): List<String>
}

+class ChatGPTObserverCheck {
+buildQuery(classes: List<ClassModel>): List<String>
}

+class CouplingCheck{
+CouplingCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+checkCoupling(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class ObserverPatternCheck{
+ObserverPatternCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+PatternCheck(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class PlantUML{
+PlantUML()

+LintCheck(classes : List<ClassModel>): List<String>
+PlantUML(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class PLK{
+PLK()

+LintCheck(classes : List<ClassModel>): List<String>
+runPLK(class: ClassModel): String
-isUserDeifned(l: LocalVariableModel, classes: List<ClassModel>): boolean
}

+class PVC{
+PVC()

+LintCheck(classes : List<ClassModel>): List<String>
+findViolations(class: ClassModel): String
+isAccessed(l: fieldModel, class: ClassModel, classes: List<ClassModel>): boolean
}

+class PTI{
+PTI()

+LintCheck(classes : List<ClassModel>): List<String>
+getConcreates(class: ClassModel): String
+containsAny(l1: ArrayList<String>, l2 ArrayList<String>): boolean
}

+class SingletonCheck{
+SingletonCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+runStaticCheck(class: ClassModel): String
+typeMatches(field: FieldModel, class ClassModel): boolean
}

+class StrategyCheck{
+StrategyCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+runClassCheck(class: ClassModel): String
+violatesStrategy(instruction: InstructionModel): boolean
}
+class TemplateCheck{
+TemplateCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+checkTemplate(class: ClassModel): String
+toString(): String
}

+class UnusedVariablesCheck{
+UnusedVariablesCheck()

+LintCheck(classes : List<ClassModel>): List<Result>
+checkUnsuedVariables(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class AccessModifier{
    +LintCheck(classes : List<ClassModel>): List<Result>
    -accessCheck(subject: ClassModel,classes: List<ClassModel> )List<Result>
    -isAccessed(element: Model, subject: ClassModel,allOtherClasses: List<ClassModel>): boolean
    -match(name: String, m: Model): boolean
} 


AccessModifier ..|> LintCheck
UnusedVariablesCheck ..|>LintCheck
TemplateCheck ..|>LintCheck
StrategyCheck ..|>LintCheck
SingletonCheck ..|>LintCheck
PTI ..|>LintCheck
PVC ..|>LintCheck
PLK ..|>LintCheck
PlantUML ..|>LintCheck
ObserverPatternCheck ..|>LintCheck
CouplingCheck ..|>LintCheck
NamingConvCheck ..|> LintCheck
ChatGPTCheck ..|>LintCheck
ChatGPTCouplingCheck ..|>ChatGPTCheck
ChatGPTSingletonCheck ..|>ChatGPTCheck
ChatGPTObserverCheck ..|>ChatGPTCheck




}

Package Models{

+class ClassModel{
-node: ClassNode
-methods: List<MethodModel>
-fields: List<FieldModel>
+ClassModel(node: ClassNode)

+getName(): String
+getInterfaces(): List<String>
+getSuperName(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
+isAbstract(): boolean
+getMethods(): List<MethodModel>
+getFields(): List<FieldModel>
-isAccessModifier(opCode: int): boolean
}
+class MethodModel{
-node: MethodNode
-localVars: List<LocalVarModel>
-params: List<ParamModel>

+MethodModel(node: MethodNode)

+getName(): String
+getDesc(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
-isAccessModifier(opCode: int): boolean
+getLocalVars():List<LocalVarModel>
+getParams(): List<ParamModel>
+getInstructions(): String
}
+class FieldModel{
-node: FieldNode
+FieldModel(node: FieldNode)

+getName(): String
+getDesc(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
-isAccessModifier(opCode: int): boolean
}

+class instructionModel{

-node: InsnList
+ instructionModel(InsnList node)
+ getSize(): int
+ get(index: int): AbstractInsnModel
}

+class AbstractInsnModel{
- node: AbstractInsnNode
+AbstractInsnModel(node: AbstractInsnNode)
+getVar(): VarInsnModel
+getFieldInsn(): FieldInsmModel
+getMethodInsns(): MethodInsnModel
+isFieldInsn(): boolean
+isMethodInsn(): boolean
+getType(): int

}

+class VarInsnModel{
- node: VarInsnNode
+ VarInsnModel(node: AbstractInsnNode)
+getType(): int
+getVar(): int
+getOpCode(): int


}
+class FieldInsmModel{
- node: AbstractInsnModel

+FieldInsmModel(node: AbstractInsnNode)
+MatchesField(f: FieldModel, owner: ClassModel): boolean
}

+class MethodInsnModel{
- node: MethodInsnNode

+MethodInsnModel(node: AbstractInsnModel)
+mathcesMethod(m : MethodModel, owner: ClassModel)
+ isInterfaceMethod(): boolean
}
+class LocalVarModel{
-node: LocalVariableNode
+LocalVarModel(node: LocalVariableNode)

+getName(): String
+getDesc(): String
+getIndex(): int
}
+abstract class Model{
    -node : Object
    +getName(): String
    +getDesc(): String
    +privatze(): void
    +isPrivate(): boolean
    +publicize(): void
}

MethodModel --|> Model
FieldModel --|> Model
ClassModel -->"*" MethodModel
ClassModel -->"*" FieldModel
AbstractInsnModel ..>VarInsnModel
AbstractInsnModel ..>FieldInsmModel

MethodInsnModel ..>MethodModel


}


Package Data{
 +class ASMAdapter{
    +ASMAdapter()
    +parseASM(folderPath: String): ArrayList<ClassModel>
    +readClassNode(classInst: byte[]): ClassNode
    +readTextRepresentation(classInst: byte[]): String
 }
 +class PackageLoader{
    +{static} LoadPackages(path: String):List<Byte[]>
 }
 +class FileOutput{
    +{static} saveResults(results: List<Result>, filepath String): void
    +{static} saveClass(classBytes: byte[], filepath: String): void
 }
}



ASMAdapter ..> ClassModel
AbstractInsnModel ..> MethodInsnModel
FieldInsmModel ..> FieldModel
FieldInsmModel ..> ClassModel
instructionModel ..> AbstractInsnModel
MethodInsnModel ..> ClassModel
MethodModel -->"*" LocalVarModel
MethodModel ..> instructionModel
PTI ..> FieldModel
PTI ..> MethodModel
PTI ..> ClassModel
NamingConvCheck ..> FieldModel
NamingConvCheck ..> MethodModel
NamingConvCheck ..> ClassModel
SingletonCheck ..> FieldModel
SingletonCheck ..> MethodModel
SingletonCheck ..> ClassModel
ASMAdapter ..>PackageLoader
ASMAdapter ..> ClassModel
Main ..>GraphicsUserInterface
GraphicsUserInterface ..>LintCheck
CommandLineUserInterface ..>LintCheck
UserInterface ..> ASMAdapter 
UnusedVariablesCheck ..>ClassModel
TemplateCheck ..>ClassModel
StrategyCheck ..>ClassModel
SingletonCheck ..>ClassModel
PTI ..>ClassModel
PVC ..>ClassModel
PLK ..>ClassModel
PlantUML ..>ClassModel
CouplingCheck ..>ClassModel
NamingConvCheck ..> ClassModel
PLK -[hidden]-> PVC
PVC -[hidden]-> PTI
LintCheck --> Result
ObserverPatternCheck -d[hidden]-> NamingConvCheck
NamingConvCheck -d[hidden]-> SingletonCheck
StrategyCheck -d[hidden]-> PlantUML
CouplingCheck -d[hidden]-> UnusedVariablesCheck
CommandLineUserInterface ..> FileOutput
AccessModifier ..> Model
AccessModifier ..> ClassModel
@enduml