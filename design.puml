@startuml
Package Display{

+class CommandLineUsername{


+{Static} runLintern(): void
-{Static} convertInput(s: String): List<int>
}

+class GraphicsUserInterface{
- {static} width: int
- {static} length: int

-{static} runGraphics(): void
-{Static} convertInput(s: String): List<int>
}

+class Main{
+{static} Main(args: String[]): void
}









}


Package Domain{


Package Checks{
+Interface LintCheck{
+{abstract}runLintCheck(class: ClassModel): List<String>
}
+class NamingConvCheck{
-class: ClassModel
+NamingConvCheck(class: ClassModel)
+runLintCheck(): List<String>
}

+class CouplingCheck{
+CouplingCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+checkCoupling(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class ObserverPatternCheck{
+ObserverPatternCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+PatternCheck(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class PlantUML{
+PlantUML()

+LintCheck(classes : List<ClassModel>): List<String>
+PlantUML(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

+class PLK{
+PLK()

+LintCheck(classes : List<ClassModel>): List<String>
+runPLK(class: ClassModel): String
-isUserDeifned(l: LocalVariableModel, classes: List<ClassModel>): boolean
}

+class PVC{
+PVC()

+LintCheck(classes : List<ClassModel>): List<String>
+findViolations(class: ClassModel): String
+isAccessed(l: fieldModel, class: ClassModel, classes: List<ClassModel>): boolean
}

+class PTI{
+PTI()

+LintCheck(classes : List<ClassModel>): List<String>
+getConcreates(class: ClassModel): String
+containsAny(l1: ArrayList<String>, l2 ArrayList<String>): boolean
}

+class SingletonCheck{
+SingletonCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+runStaticCheck(class: ClassModel): String
+typeMatches(field: FieldModel, class ClassModel): boolean
}

+class StrategyCheck{
+StrategyCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+runClassCheck(class: ClassModel): String
+violatesStrategy(instruction: InstructionModel): boolean
}
+class TemplateCheck{
+TemplateCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+checkTemplate(class: ClassModel): String
+toString(): String
}

+class UnusedVariablesCheck{
+UnusedVariablesCheck()

+LintCheck(classes : List<ClassModel>): List<String>
+checkUnsuedVariables(class: ClassModel): String
- containsMethods(class: ClassModel, list: ArrayList<String>): boolean
- ImplementsInterface(class: ClassModel, interface: String): boolean
- checkField(class: ClassModel, field: String): boolean
}

UnusedVariablesCheck ..|>LintCheck
TemplateCheck ..|>LintCheck
StrategyCheck ..|>LintCheck
SingletonCheck ..|>LintCheck
PTI ..|>LintCheck
PVC ..|>LintCheck
PLK ..|>LintCheck
PlantUML ..|>LintCheck
ObserverPatternCheck ..|>LintCheck
CouplingCheck ..|>LintCheck
NamingConvCheck ..|> LintCheck




}

Package Model{

+class ClassModel{
-node: ClassNode
-methods: List<MethodModel>
-fields: List<FieldModel>
+ClassModel(node: ClassNode)

+getName(): String
+getInterfaces(): List<String>
+getSuperName(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
+isAbstract(): boolean
+getMethods(): List<MethodModel>
+getFields(): List<FieldModel>
-isAccessModifier(opCode: int): boolean
}
+class MethodModel{
-node: MethodNode
-localVars: List<LocalVarModel>
-params: List<ParamModel>

+MethodModel(node: MethodNode)

+getName(): String
+getDesc(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
-isAccessModifier(opCode: int): boolean
+getLocalVars():List<LocalVarModel>
+getParams(): List<ParamModel>
++++++++++getInstructions(): String
}
+class FieldModel{
-node: FieldNode
+FieldModel(node: FieldNode)

+getName(): String
+getDesc(): String
+isPublic(): boolean
+isPrivate(): boolean
+isProtected(): boolean
+isStatic(): boolean
+isFinal(): boolean
-isAccessModifier(opCode: int): boolean
}

+class instructionModel{

-node: InsnList
+ instructionModel(InsnList node)
+ getSize(): int
+ get(index: int): AbstractInsnModel
}

+class AbstractInsnModel{
- node: AbstractInsnNode
+AbstractInsnModel(node: AbstractInsnNode)
+getVar(): VarInsnModel
+getFieldInsn(): FieldInsmModel
+getMethodInsns(): MethodInsnModel
+isFieldInsn(): boolean
+isMethodInsn(): boolean
+getType(): int

}

+class VarInsnModel{
- node: VarInsnNode
+ VarInsnModel(node: AbstractInsnNode)
+getType(): int
+getVar(): int
+getOpCode(): int


}
+class FieldInsmModel{
- node: AbstractInsnModel

+FieldInsmModel(node: AbstractInsnNode)
+MatchesField(f: FieldModel, owner: ClassModel): boolean
}

+class MethodInsnModel{
- node: MethodInsnNode

+MethodInsnModel(node: AbstractInsnModel)
+mathcesMethod(m : MethodModel, owner: ClassModel)
+ isInterfaceMethod(): boolean
}
+class LocalVarModel{
-node: LocalVariableNode
+LocalVarModel(node: LocalVariableNode)

+getName(): String
+getDesc(): String
+getIndex(): int
}


ClassModel -->"*" MethodModel
ClassModel -->"*" FieldModel
AbstractInsnModel ..>VarInsnModel
AbstractInsnModel ..>FieldInsmModel

MethodInsnModel ..>MethodModel


}




}


Package Data{
 +class ASMAdapter{
    +ASMAdapter()
    +parseClases(files: List<String>): List<ClassModel>
 }
 +class PackageLoader{
 +{static} LoadPackages(path: String):List<Byte[]>
 }
}

Package Java{
    +class Pattern{
    }
    Package ASM{
        +class Opcodes{
        }
        +class AbstractInsnNode{
        }
        +class ClassNode{
        }
        +class FieldInsnNode{
        }
        +class FieldNode{
        }
        +class InsnList{
        }
        +class MethodInsnNode{
        }
        +class MethodNode{
        }
        +class VarInsnNode{
        }
        +class LocalVariableNode{
        }

    }
}

ASMAdapter ..> ClassModel



AbstractInsnModel ..> MethodInsnModel
AbstractInsnModel -->"1" AbstractInsnNode

ClassModel -->"1" ClassNode


ClassModel ..> Opcodes

FieldInsmModel -->"1" AbstractInsnNode
FieldInsmModel ..> FieldModel
FieldInsmModel ..> ClassModel
FieldInsmModel ..> FieldInsnNode

FieldModel -->"1" FieldNode
FieldModel ..> Opcodes

instructionModel -->"1" InsnList
instructionModel ..> AbstractInsnModel

LocalVarModel -->"1" LocalVariableNode

MethodInsnModel -->"1" MethodInsnNode
MethodInsnModel ..> AbstractInsnNode
MethodInsnModel ..> ClassModel


MethodModel -->"1" MethodNode
MethodModel -->"1" InsnList
MethodModel -->"*" LocalVarModel
MethodModel ..> instructionModel
MethodModel ..> Opcodes

VarInsnModel -->"1" VarInsnNode
VarInsnModel ..> AbstractInsnNode


PTI ..> FieldModel
PTI ..> MethodModel
PTI ..> ClassModel

NamingConvCheck ..> FieldModel
NamingConvCheck ..> MethodModel
NamingConvCheck ..> ClassModel

SingletonCheck ..> FieldModel
SingletonCheck ..> MethodModel
SingletonCheck ..> ClassModel
Main ..>CommandLineUsername
ASMAdapter ..>PackageLoader
ASMAdapter ..> ClassModel
Main ..>GraphicsUserInterface
GraphicsUserInterface ..>LintCheck
CommandLineUsername ..>LintCheck
UnusedVariablesCheck ..>ClassModel
TemplateCheck ..>ClassModel
StrategyCheck ..>ClassModel
SingletonCheck ..>ClassModel
PTI ..>ClassModel
PVC ..>ClassModel
PLK ..>ClassModel
PlantUML ..>ClassModel
CouplingCheck ..>ClassModel
NamingConvCheck ..> ClassModel

PLK -[hidden]-> PVC
PVC -[hidden]-> PTI
PTI -[hidden]-> SingletonCheck
SingletonCheck -[hidden]-> ObserverPatternCheck
ObserverPatternCheck -[hidden]-> NamingConvCheck
PLK -[hidden]-> PVC
PLK -[hidden]-> PVC




@enduml